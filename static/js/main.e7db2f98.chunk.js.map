{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","goods","visibleGoods","sort","firstGood","secondGood","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","handleSortChange","newSortType","className","type","classNames","onClick","previous","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EA7BD,SACLA,EADK,GAGJ,IADCF,EACF,EADEA,SAAUH,EACZ,EADYA,WAENM,EAAY,YAAOD,GAmBzB,OAjBIF,IAAaP,EAASM,MACxBI,EAAaC,MAAK,SAACC,EAAWC,GAC5B,OAAQN,GACN,KAAKP,EAASc,SACZ,OAAOF,EAAUG,cAAcF,GACjC,KAAKb,EAASgB,OACZ,OAAOJ,EAAUK,OAASJ,EAAWI,OACvC,QACE,OAAO,MAKXb,GACFM,EAAaQ,UAGRR,EAMOS,CAAkBlB,EAAiB,CAAEG,aAAYG,aAEzDa,EAAmB,SAACC,GACxBb,EAAYa,IAYd,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CACE,WAAYjB,IAAaP,EAASc,WAGtCW,QAAS,WACPL,EAAiBpB,EAASc,WAV9B,iCAgBA,wBACES,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CACE,WAAYjB,IAAaP,EAASgB,SAGtCS,QAAS,WACPL,EAAiBpB,EAASgB,SAV9B,4BAgBA,wBACEO,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CACE,YAAapB,IAGjBqB,QArDoB,WAC1BpB,GAAc,SAAAqB,GAAQ,OAAKA,MA2CvB,sBAcEtB,GAAcG,IAAaP,EAASM,OACpC,wBACEiB,KAAK,SACLD,UAAWE,IACT,SACA,UACA,YAEFC,QA9DS,WACjBpB,GAAc,GACdG,EAAYR,EAASM,OAqDf,sBAcJ,6BACE,6BACGG,EAAMkB,KAAI,SAAAC,GAAI,OACb,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,cC1InBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e7db2f98.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  if (sortType !== SortType.NONE) {\n    visibleGoods.sort((firstGood, secondGood) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return firstGood.localeCompare(secondGood);\n        case SortType.LENGTH:\n          return firstGood.length - secondGood.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const goods = getReorderedGoods(goodsFromServer, { isReversed, sortType });\n\n  const handleSortChange = (newSortType: SortType) => {\n    setSortType(newSortType);\n  };\n\n  const handleReverseChange = () => {\n    setIsReversed(previous => !previous);\n  };\n\n  const resetState = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            {\n              'is-light': sortType !== SortType.ALPHABET,\n            },\n          )}\n          onClick={() => {\n            handleSortChange(SortType.ALPHABET);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={() => {\n            handleSortChange(SortType.LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={handleReverseChange}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortType !== SortType.NONE) && (\n          <button\n            type=\"button\"\n            className={classNames(\n              'button',\n              'is-info',\n              'is-light',\n            )}\n            onClick={resetState}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {goods.map(good => (\n            <li\n              key={good}\n              data-cy=\"Good\"\n            >\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}